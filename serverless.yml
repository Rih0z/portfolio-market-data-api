service: pfwise-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, ''}
  memorySize: 256
  timeout: 30
  
  environment:
    NODE_ENV: ${self:provider.stage}
    ADMIN_EMAIL: ${env:ADMIN_EMAIL, ''}
    ADMIN_API_KEY: ${env:ADMIN_API_KEY, ''}
    CRON_SECRET: ${env:CRON_SECRET, ''}
    # AWS_REGION: ${env:AWS_REGION, 'us-west-2'}  # Lambda予約語のため削除
    # AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID, ''}   # Lambda予約語のため削除
    DAILY_REQUEST_LIMIT: ${env:DAILY_REQUEST_LIMIT, '5000'}
    MONTHLY_REQUEST_LIMIT: ${env:MONTHLY_REQUEST_LIMIT, '100000'}
    DISABLE_ON_LIMIT: ${env:DISABLE_ON_LIMIT, 'true'}
    CACHE_TIME_US_STOCK: ${env:CACHE_TIME_US_STOCK, '3600'}
    CACHE_TIME_JP_STOCK: ${env:CACHE_TIME_JP_STOCK, '3600'}
    CACHE_TIME_MUTUAL_FUND: ${env:CACHE_TIME_MUTUAL_FUND, '10800'}
    CACHE_TIME_EXCHANGE_RATE: ${env:CACHE_TIME_EXCHANGE_RATE, '21600'}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID, ''}
    GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET, ''}
    SESSION_TABLE: ${env:SESSION_TABLE, '${self:service}-${self:provider.stage}-sessions'}
    CORS_ALLOW_ORIGIN: ${env:CORS_ALLOW_ORIGIN, '*'}
    DRIVE_FOLDER_NAME: ${env:DRIVE_FOLDER_NAME, 'PortfolioManagerData'}
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
    BUDGET_CHECK_ENABLED: ${env:BUDGET_CHECK_ENABLED, 'false'}
    FREE_TIER_LIMIT: ${env:FREE_TIER_LIMIT, '25'}
    DEFAULT_EXCHANGE_RATE: ${env:DEFAULT_EXCHANGE_RATE, '150.0'}
    
    # 外部APIキー（オプション）
    ALPACA_API_KEY: ${env:ALPACA_API_KEY, ''}
    ALPACA_API_SECRET: ${env:ALPACA_API_SECRET, ''}
    ALPHA_VANTAGE_API_KEY: ${env:ALPHA_VANTAGE_API_KEY, ''}
    YAHOO_FINANCE_API_KEY: ${env:YAHOO_FINANCE_API_KEY, ''}
    YAHOO_FINANCE_API_HOST: ${env:YAHOO_FINANCE_API_HOST, 'yh-finance.p.rapidapi.com'}
    OPEN_EXCHANGE_RATES_APP_ID: ${env:OPEN_EXCHANGE_RATES_APP_ID, ''}
    FIXER_API_KEY: ${env:FIXER_API_KEY, ''}
    
    # スクレイピング設定
    JP_STOCK_SCRAPING_TIMEOUT: ${env:JP_STOCK_SCRAPING_TIMEOUT, '30000'}
    US_STOCK_SCRAPING_TIMEOUT: ${env:US_STOCK_SCRAPING_TIMEOUT, '20000'}
    MUTUAL_FUND_TIMEOUT: ${env:MUTUAL_FUND_TIMEOUT, '30000'}
    SCRAPING_RATE_LIMIT_DELAY: ${env:SCRAPING_RATE_LIMIT_DELAY, '500'}
    SCRAPING_MAX_FAILURES: ${env:SCRAPING_MAX_FAILURES, '3'}
    SCRAPING_COOLDOWN_DAYS: ${env:SCRAPING_COOLDOWN_DAYS, '7'}
    
    # GitHub設定（フォールバック用）
    GITHUB_TOKEN: ${env:GITHUB_TOKEN, ''}
    GITHUB_REPO_OWNER: ${env:GITHUB_REPO_OWNER, ''}
    GITHUB_REPO_NAME: ${env:GITHUB_REPO_NAME, ''}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 
        - !GetAtt MarketDataCacheTable.Arn
        - !GetAtt SessionsTable.Arn
        - !GetAtt ScrapingBlacklistTable.Arn
    # SNS権限を一時的に無効化
    # - Effect: Allow
    #   Action:
    #     - sns:Publish
    #   Resource: !Ref AlertTopic
    - Effect: Allow
      Action:
        - budgets:DescribeBudgetPerformanceHistory
        - budgets:DescribeBudgets
      Resource: '*'

functions:
  # マーケットデータ関連機能
  marketData:
    handler: src/function/marketData.handler
    events:
      - http:
          path: api/market-data
          method: get
          cors: true
  
  preWarmCache:
    handler: src/function/preWarmCache.handler
    events:
      - schedule: rate(1 hour)
  
  # 管理者機能
  getStatus:
    handler: src/function/admin/getStatus.handler
    events:
      - http:
          path: admin/status
          method: get
          cors: true
          private: true
  
  resetUsage:
    handler: src/function/admin/resetUsage.handler
    events:
      - http:
          path: admin/reset
          method: post
          cors: true
          private: true
  
  getBudgetStatus:
    handler: src/function/admin/getBudgetStatus.handler
    events:
      - http:
          path: admin/getBudgetStatus
          method: get
          cors: true
          private: true
  
  # Google認証関連
  googleLogin:
    handler: src/function/auth/googleLogin.handler
    events:
      - http:
          path: auth/google/login
          method: post
          cors: true
  
  getSession:
    handler: src/function/auth/getSession.handler
    events:
      - http:
          path: auth/session
          method: get
          cors: true
  
  logout:
    handler: src/function/auth/logout.handler
    events:
      - http:
          path: auth/logout
          method: post
          cors: true
  
  # Google Drive連携
  saveFile:
    handler: src/function/drive/saveFile.handler
    events:
      - http:
          path: drive/save
          method: post
          cors: true
  
  loadFile:
    handler: src/function/drive/loadFile.handler
    events:
      - http:
          path: drive/load
          method: get
          cors: true
  
  listFiles:
    handler: src/function/drive/listFiles.handler
    events:
      - http:
          path: drive/files
          method: get
          cors: true

resources:
  Resources:
    MarketDataCacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-cache
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    
    # セッション管理用DynamoDBテーブル
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:SESSION_TABLE, '${self:service}-${self:provider.stage}-sessions'}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    
    # スクレイピングブラックリスト用DynamoDBテーブル
    ScrapingBlacklistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-scraping-blacklist
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: symbol
            AttributeType: S
        KeySchema:
          - AttributeName: symbol
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    
    # AlertTopic を一時的に無効化
    # AlertTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     TopicName: ${self:service}-${self:provider.stage}-alerts
    #     Subscription:
    #       - Protocol: email
    #         Endpoint: ${env:ADMIN_EMAIL, ''}

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
